/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PatientInterface extends ethers.utils.Interface {
  functions: {
    "addRecord(string)": FunctionFragment;
    "addr()": FunctionFragment;
    "doctor()": FunctionFragment;
    "getParticularRecord(uint256)": FunctionFragment;
    "patient()": FunctionFragment;
    "patientRecords(uint256)": FunctionFragment;
    "recordCount()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addRecord", values: [string]): string;
  encodeFunctionData(functionFragment: "addr", values?: undefined): string;
  encodeFunctionData(functionFragment: "doctor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getParticularRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "patient", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "patientRecords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordCount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addRecord", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doctor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getParticularRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "patient", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "patientRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordCount",
    data: BytesLike
  ): Result;

  events: {};
}

export class Patient extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PatientInterface;

  functions: {
    addRecord(
      _recordHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addRecord(string)"(
      _recordHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addr(overrides?: CallOverrides): Promise<[string]>;

    "addr()"(overrides?: CallOverrides): Promise<[string]>;

    doctor(
      overrides?: CallOverrides
    ): Promise<[string, string] & { doctorName: string; hospitalName: string }>;

    "doctor()"(
      overrides?: CallOverrides
    ): Promise<[string, string] & { doctorName: string; hospitalName: string }>;

    getParticularRecord(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string] & {
          recordHash: string;
          doctorName: string;
          hospitalName: string;
        }
      ]
    >;

    "getParticularRecord(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string] & {
          recordHash: string;
          doctorName: string;
          hospitalName: string;
        }
      ]
    >;

    patient(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        name: string;
        dob: string;
        bGroup: string;
        id: string;
      }
    >;

    "patient()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        name: string;
        dob: string;
        bGroup: string;
        id: string;
      }
    >;

    patientRecords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        recordHash: string;
        doctorName: string;
        hospitalName: string;
      }
    >;

    "patientRecords(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        recordHash: string;
        doctorName: string;
        hospitalName: string;
      }
    >;

    recordCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "recordCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addRecord(
    _recordHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addRecord(string)"(
    _recordHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addr(overrides?: CallOverrides): Promise<string>;

  "addr()"(overrides?: CallOverrides): Promise<string>;

  doctor(
    overrides?: CallOverrides
  ): Promise<[string, string] & { doctorName: string; hospitalName: string }>;

  "doctor()"(
    overrides?: CallOverrides
  ): Promise<[string, string] & { doctorName: string; hospitalName: string }>;

  getParticularRecord(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      recordHash: string;
      doctorName: string;
      hospitalName: string;
    }
  >;

  "getParticularRecord(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      recordHash: string;
      doctorName: string;
      hospitalName: string;
    }
  >;

  patient(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      name: string;
      dob: string;
      bGroup: string;
      id: string;
    }
  >;

  "patient()"(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      name: string;
      dob: string;
      bGroup: string;
      id: string;
    }
  >;

  patientRecords(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      recordHash: string;
      doctorName: string;
      hospitalName: string;
    }
  >;

  "patientRecords(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      recordHash: string;
      doctorName: string;
      hospitalName: string;
    }
  >;

  recordCount(overrides?: CallOverrides): Promise<BigNumber>;

  "recordCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addRecord(_recordHash: string, overrides?: CallOverrides): Promise<void>;

    "addRecord(string)"(
      _recordHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addr(overrides?: CallOverrides): Promise<string>;

    "addr()"(overrides?: CallOverrides): Promise<string>;

    doctor(
      overrides?: CallOverrides
    ): Promise<[string, string] & { doctorName: string; hospitalName: string }>;

    "doctor()"(
      overrides?: CallOverrides
    ): Promise<[string, string] & { doctorName: string; hospitalName: string }>;

    getParticularRecord(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        recordHash: string;
        doctorName: string;
        hospitalName: string;
      }
    >;

    "getParticularRecord(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        recordHash: string;
        doctorName: string;
        hospitalName: string;
      }
    >;

    patient(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        name: string;
        dob: string;
        bGroup: string;
        id: string;
      }
    >;

    "patient()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        name: string;
        dob: string;
        bGroup: string;
        id: string;
      }
    >;

    patientRecords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        recordHash: string;
        doctorName: string;
        hospitalName: string;
      }
    >;

    "patientRecords(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        recordHash: string;
        doctorName: string;
        hospitalName: string;
      }
    >;

    recordCount(overrides?: CallOverrides): Promise<BigNumber>;

    "recordCount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addRecord(
      _recordHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addRecord(string)"(
      _recordHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addr(overrides?: CallOverrides): Promise<BigNumber>;

    "addr()"(overrides?: CallOverrides): Promise<BigNumber>;

    doctor(overrides?: CallOverrides): Promise<BigNumber>;

    "doctor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getParticularRecord(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParticularRecord(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    patient(overrides?: CallOverrides): Promise<BigNumber>;

    "patient()"(overrides?: CallOverrides): Promise<BigNumber>;

    patientRecords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "patientRecords(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recordCount(overrides?: CallOverrides): Promise<BigNumber>;

    "recordCount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addRecord(
      _recordHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addRecord(string)"(
      _recordHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "addr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    doctor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "doctor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getParticularRecord(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParticularRecord(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    patient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "patient()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    patientRecords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "patientRecords(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recordCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "recordCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
