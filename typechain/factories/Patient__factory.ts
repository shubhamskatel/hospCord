/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  BytesLike,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Patient } from "../Patient";

export class Patient__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _name: string,
    _dob: string,
    _bGroup: string,
    _id: BytesLike,
    _doctor: string,
    _hospital: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Patient> {
    return super.deploy(
      _name,
      _dob,
      _bGroup,
      _id,
      _doctor,
      _hospital,
      overrides || {}
    ) as Promise<Patient>;
  }
  getDeployTransaction(
    _name: string,
    _dob: string,
    _bGroup: string,
    _id: BytesLike,
    _doctor: string,
    _hospital: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _dob,
      _bGroup,
      _id,
      _doctor,
      _hospital,
      overrides || {}
    );
  }
  attach(address: string): Patient {
    return super.attach(address) as Patient;
  }
  connect(signer: Signer): Patient__factory {
    return super.connect(signer) as Patient__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Patient {
    return new Contract(address, _abi, signerOrProvider) as Patient;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_dob",
        type: "string",
      },
      {
        internalType: "string",
        name: "_bGroup",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "_id",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "_doctor",
        type: "string",
      },
      {
        internalType: "string",
        name: "_hospital",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_recordHash",
        type: "string",
      },
    ],
    name: "addRecord",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "addr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "doctor",
    outputs: [
      {
        internalType: "string",
        name: "doctorName",
        type: "string",
      },
      {
        internalType: "string",
        name: "hospitalName",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getParticularRecord",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "recordHash",
            type: "string",
          },
          {
            internalType: "string",
            name: "doctorName",
            type: "string",
          },
          {
            internalType: "string",
            name: "hospitalName",
            type: "string",
          },
        ],
        internalType: "struct Patient.RecordStruct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "patient",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "dob",
        type: "string",
      },
      {
        internalType: "string",
        name: "bGroup",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "patientRecords",
    outputs: [
      {
        internalType: "string",
        name: "recordHash",
        type: "string",
      },
      {
        internalType: "string",
        name: "doctorName",
        type: "string",
      },
      {
        internalType: "string",
        name: "hospitalName",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "recordCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "";
