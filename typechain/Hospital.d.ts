/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface HospitalInterface extends ethers.utils.Interface {
  functions: {
    "addDoctor(string,string,string,address)": FunctionFragment;
    "addPatient(string,string,string)": FunctionFragment;
    "doctorInfo(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "patientAddress(bytes32)": FunctionFragment;
    "patientCount()": FunctionFragment;
    "patientID(uint256)": FunctionFragment;
    "patientInstance()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addDoctor",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPatient",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "doctorInfo", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "patientAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "patientCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "patientID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "patientInstance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addDoctor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPatient", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doctorInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "patientAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "patientCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "patientID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "patientInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Hospital extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HospitalInterface;

  functions: {
    addDoctor(
      _doctorName: string,
      _hospitalName: string,
      _password: string,
      _doctorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addDoctor(string,string,string,address)"(
      _doctorName: string,
      _hospitalName: string,
      _password: string,
      _doctorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPatient(
      _name: string,
      _dob: string,
      _bGroup: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addPatient(string,string,string)"(
      _name: string,
      _dob: string,
      _bGroup: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    doctorInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        doctorName: string;
        hospitalName: string;
        authorization: boolean;
      }
    >;

    "doctorInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        doctorName: string;
        hospitalName: string;
        authorization: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    patientAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "patientAddress(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    patientCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "patientCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    patientID(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "patientID(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    patientInstance(overrides?: CallOverrides): Promise<[string]>;

    "patientInstance()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addDoctor(
    _doctorName: string,
    _hospitalName: string,
    _password: string,
    _doctorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addDoctor(string,string,string,address)"(
    _doctorName: string,
    _hospitalName: string,
    _password: string,
    _doctorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPatient(
    _name: string,
    _dob: string,
    _bGroup: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addPatient(string,string,string)"(
    _name: string,
    _dob: string,
    _bGroup: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  doctorInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & {
      doctorName: string;
      hospitalName: string;
      authorization: boolean;
    }
  >;

  "doctorInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & {
      doctorName: string;
      hospitalName: string;
      authorization: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  patientAddress(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "patientAddress(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  patientCount(overrides?: CallOverrides): Promise<BigNumber>;

  "patientCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  patientID(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "patientID(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  patientInstance(overrides?: CallOverrides): Promise<string>;

  "patientInstance()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDoctor(
      _doctorName: string,
      _hospitalName: string,
      _password: string,
      _doctorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addDoctor(string,string,string,address)"(
      _doctorName: string,
      _hospitalName: string,
      _password: string,
      _doctorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPatient(
      _name: string,
      _dob: string,
      _bGroup: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPatient(string,string,string)"(
      _name: string,
      _dob: string,
      _bGroup: string,
      overrides?: CallOverrides
    ): Promise<void>;

    doctorInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        doctorName: string;
        hospitalName: string;
        authorization: boolean;
      }
    >;

    "doctorInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        doctorName: string;
        hospitalName: string;
        authorization: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    patientAddress(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "patientAddress(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    patientCount(overrides?: CallOverrides): Promise<BigNumber>;

    "patientCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    patientID(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "patientID(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    patientInstance(overrides?: CallOverrides): Promise<string>;

    "patientInstance()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addDoctor(
      _doctorName: string,
      _hospitalName: string,
      _password: string,
      _doctorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addDoctor(string,string,string,address)"(
      _doctorName: string,
      _hospitalName: string,
      _password: string,
      _doctorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPatient(
      _name: string,
      _dob: string,
      _bGroup: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addPatient(string,string,string)"(
      _name: string,
      _dob: string,
      _bGroup: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    doctorInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "doctorInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    patientAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "patientAddress(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    patientCount(overrides?: CallOverrides): Promise<BigNumber>;

    "patientCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    patientID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "patientID(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    patientInstance(overrides?: CallOverrides): Promise<BigNumber>;

    "patientInstance()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDoctor(
      _doctorName: string,
      _hospitalName: string,
      _password: string,
      _doctorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addDoctor(string,string,string,address)"(
      _doctorName: string,
      _hospitalName: string,
      _password: string,
      _doctorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPatient(
      _name: string,
      _dob: string,
      _bGroup: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addPatient(string,string,string)"(
      _name: string,
      _dob: string,
      _bGroup: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    doctorInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "doctorInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    patientAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "patientAddress(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    patientCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "patientCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    patientID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "patientID(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    patientInstance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "patientInstance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
